{"version":3,"file":"static/js/224.fc84f6e2.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://react-homework-template/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/DeleteContact/DeleteContact.jsx","components/EditContact/EditContact.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\nexport const selectStatus = state => state.contacts.status;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"loaderContainer\":\"Loader_loaderContainer__UDDYf\"};","import css from './Loader.module.css';\nimport { ThreeDots } from 'react-loader-spinner';\nconst Loader = () => {\n  return (\n    <div className={css.loaderContainer}>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#3b5998\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};\nexport default Loader;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { STATUS } from 'constants/constants';\nimport { addContactsThunk } from 'redux/contacts.thunk';\nimport { selectStatus } from 'redux/selectors';\nimport Loader from 'components/Loader/Loader';\n\nimport { FormLabel, Input, Button, Stack } from '@chakra-ui/react';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContactsThunk({ name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  if (status === STATUS.idle || status === STATUS.success) {\n    return (\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <Stack minW=\"300px\" mr=\"auto\" ml=\"auto\">\n          <FormLabel mr=\"0px\">\n            Name\n            <Input\n              minW=\"300px\"\n              pl=\"1.5rem\"\n              _focusVisible={{\n                borderColor: 'blue.200',\n                boxShadow: '0px 1px 0px 0px #fbd38d',\n              }}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              placeholder=\"Enter name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only  letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </FormLabel>\n          <FormLabel>\n            Number\n            <Input\n              minW=\"300px\"\n              pl=\"1.5rem\"\n              _focusVisible={{\n                borderColor: 'blue.200',\n                boxShadow: '0px 1px 0px 0px #fbd38d',\n              }}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={handleChange}\n              placeholder=\"Enter number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </FormLabel>\n          <Button type=\"submit\" colorScheme=\"blue\" size=\"md\" m={'auto'}>\n            Add new contact\n          </Button>\n        </Stack>\n      </form>\n    );\n  }\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\nexport default Form;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nimport { FormLabel, Input, Stack } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Stack minW=\"300px\" mr=\"auto\" ml=\"auto\">\n      <FormLabel>\n        Find contacts by name\n        <Input\n          minW=\"300px\"\n          pl=\"1.5rem\"\n          _focusVisible={{\n            borderColor: 'blue.200',\n            boxShadow: '0px 1px 0px 0px #fbd38d',\n          }}\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={e => dispatch(filterContacts(e.target.value))}\n          placeholder=\"Enter name\"\n        />\n      </FormLabel>\n    </Stack>\n  );\n};\n\nexport default Filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContactByIdThunk } from 'redux/contacts.thunk';\nimport { STATUS } from 'constants/constants';\nimport { selectStatus } from 'redux/selectors';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalCloseButton,\n  Button,\n  Box,\n} from '@chakra-ui/react';\n\nconst DeleteContact = ({ id, onClose, isOpen, reset }) => {\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n  const deleteContact = id => {\n    dispatch(deleteContactByIdThunk(id));\n    onClose();\n    reset();\n  };\n  const onCloseModal = () => {\n    onClose();\n    reset();\n  };\n  if (status === STATUS.success) {\n    return (\n      <Modal size=\"xs\" isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent display=\"flex\" alignItems=\"center\">\n          <ModalHeader>Delete the contact?</ModalHeader>\n          <ModalCloseButton />\n          <ModalFooter>\n            <Box as=\"ul\" display=\"flex\" flexDirection=\"row\">\n              <li>\n                <Button\n                  size=\"md\"\n                  colorScheme=\"blue\"\n                  mr={5}\n                  onClick={() => deleteContact(id)}\n                >\n                  OK\n                </Button>\n              </li>\n              <li>\n                <Button size=\"md\" colorScheme=\"blue\" onClick={onCloseModal}>\n                  Cancel\n                </Button>\n              </li>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    );\n  }\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\n\nDeleteContact.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  reset: PropTypes.func,\n  id: PropTypes.string.isRequired,\n};\n\nexport default DeleteContact;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { refreshContactByIdThunk } from 'redux/contacts.thunk';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { STATUS } from 'constants/constants';\nimport { selectStatus } from 'redux/selectors';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  Input,\n  FormLabel,\n  ModalHeader,\n  FormControl,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from '@chakra-ui/react';\n\nconst EditContact = ({ id, name, number, onClose, isOpen, reset }) => {\n  const dispatch = useDispatch();\n  const status = useSelector(selectStatus);\n  const [newName, setNewName] = useState(name);\n  const [newNumber, setNewNumber] = useState(number);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'newName':\n        setNewName(value);\n        break;\n      case 'newNumber':\n        setNewNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(refreshContactByIdThunk({ id, name: newName, number: newNumber }));\n    onClose();\n    reset();\n  };\n  const onCloseModal = () => {\n    onClose();\n    reset();\n  };\n  if (status === STATUS.success) {\n    return (\n      <Modal size=\"xs\" isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent display=\"flex\" alignItems=\"center\">\n          <ModalHeader>Edit Contact</ModalHeader>\n          <ModalCloseButton />\n          <form onSubmit={handleSubmit}>\n            <ModalBody pb={6}>\n              <FormControl>\n                <FormLabel>\n                  Name\n                  <Input\n                    pl=\"1.5rem\"\n                    _focusVisible={{\n                      borderColor: 'blue.200',\n                      boxShadow: '0px 1px 0px 0px #fbd38d',\n                    }}\n                    type=\"text\"\n                    name=\"newName\"\n                    value={newName}\n                    onChange={handleChange}\n                    placeholder=\"Enter name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                  />\n                </FormLabel>\n              </FormControl>\n              <FormControl>\n                <FormLabel>\n                  Number\n                  <Input\n                    pl=\"1.5rem\"\n                    _focusVisible={{\n                      borderColor: 'red.200',\n                      boxShadow: '0px 1px 0px 0px #fbd38d',\n                    }}\n                    type=\"tel\"\n                    name=\"newNumber\"\n                    value={newNumber}\n                    onChange={handleChange}\n                    placeholder=\"Enter number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                  />\n                </FormLabel>\n              </FormControl>\n            </ModalBody>\n            <ModalFooter>\n              <Button\n                size=\"md\"\n                colorScheme=\"blue\"\n                type=\"submit\"\n                ml=\"auto\"\n                mr={3}\n              >\n                OK\n              </Button>\n              <Button\n                size=\"md\"\n                colorScheme=\"blue\"\n                mr=\"auto\"\n                type=\"button\"\n                onClick={onCloseModal}\n              >\n                Cancel\n              </Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    );\n  }\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\n\nEditContact.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  reset: PropTypes.func,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default EditContact;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport Filter from 'components/Filter';\nimport { selectVisibleContacts, selectStatus } from 'redux/selectors';\nimport { getContactsThunk } from 'redux/contacts.thunk';\n\nimport Loader from 'components/Loader/Loader';\n\nimport DeleteContact from 'components/DeleteContact';\nimport EditContact from 'components/EditContact';\nimport { STATUS } from 'constants/constants';\n\nimport {\n  ButtonGroup,\n  IconButton,\n  Box,\n  Text,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nimport { DeleteIcon, EditIcon } from '@chakra-ui/icons';\n\nconst ContactsList = () => {\n  const [deleteContactId, setDeleteContactId] = useState('');\n  const [refreshContactId, setRefreshContactId] = useState('');\n  const [contactName, setContactName] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n  const dispatch = useDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const status = useSelector(selectStatus);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n  const resetId = () => {\n    setDeleteContactId('');\n    setRefreshContactId('');\n  };\n  if (status === STATUS.success) {\n    return (\n      <>\n        <Filter />\n        <Box as=\"ul\" minW=\"300px\" mr=\"auto\" ml=\"auto\">\n          {visibleContacts.map(({ id, name, number }) => (\n            <Box as=\"li\" display=\"flex\" alignItems=\"center\" mb={2} key={id}>\n              <Text fontSize=\"lg\" fontWeight=\"500\">\n                {name[0].toUpperCase() + name.substring(1)} :{' '}\n              </Text>\n              <Text fontSize=\"lg\" ml={2} mr=\"auto\">\n                {number}\n              </Text>\n              <ButtonGroup mr={3}>\n                <IconButton\n                  colorScheme=\"blue\"\n                  aria-label=\"Edit contact\"\n                  icon={<EditIcon size=\"md\" boxSize={4} />}\n                  onClick={() => {\n                    dispatch(() => {\n                      setRefreshContactId(id);\n                      onOpen();\n                      setContactName(name);\n                      setContactNumber(number);\n                    });\n                  }}\n                />\n                <IconButton\n                  colorScheme=\"red\"\n                  aria-label=\"Delete contact\"\n                  icon={<DeleteIcon size=\"md\" boxSize={4} />}\n                  onClick={() => {\n                    dispatch(() => {\n                      setDeleteContactId(id);\n                      onOpen();\n                    });\n                  }}\n                />\n              </ButtonGroup>\n            </Box>\n          ))}\n        </Box>\n\n        {isOpen && deleteContactId && (\n          <DeleteContact\n            id={deleteContactId}\n            isOpen={isOpen}\n            onClose={onClose}\n            reset={resetId}\n          />\n        )}\n        {isOpen && refreshContactId && (\n          <EditContact\n            id={refreshContactId}\n            name={contactName}\n            number={contactNumber}\n            isOpen={isOpen}\n            onClose={onClose}\n            reset={resetId}\n          />\n        )}\n      </>\n    );\n  }\n\n  if (status === STATUS.error) {\n    return <p>Something went wrong ...</p>;\n  }\n  if (status === STATUS.loading) {\n    return <Loader />;\n  }\n};\n\nexport default ContactsList;\n","import Form from 'components/Form';\nimport ContactsList from 'components/ContactsList';\n\nimport {\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Container,\n} from '@chakra-ui/react';\nconst ContactsPage = () => {\n  return (\n    <Container\n      display=\"flex\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      maxW=\"md\"\n      mr=\"auto\"\n      ml=\"auto\"\n      p={3}\n    >\n      <Tabs>\n        <TabList>\n          <Tab\n            p={3}\n            size=\"md\"\n            mr={1}\n            borderRadius={'12px'}\n            _selected={{ color: 'white', bg: '#99aab5' }}\n            _hover={{ bg: '#99aab5', color: 'white' }}\n            fontSize=\"md\"\n            fontWeight=\"500\"\n          >\n            Add Contact\n          </Tab>\n          <Tab\n            p={3}\n            size=\"md\"\n            borderRadius={'12px'}\n            _selected={{ color: 'white', bg: '#99aab5' }}\n            _hover={{ bg: '#99aab5', color: 'white' }}\n            fontSize=\"md\"\n            fontWeight=\"500\"\n          >\n            All Contacts\n          </Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <Form />\n          </TabPanel>\n          <TabPanel>\n            <ContactsList />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectFilter","state","filter","selectStatus","contacts","status","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","_jsx","className","css","children","ThreeDots","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","_e$target","target","value","STATUS","onSubmit","preventDefault","addContactsThunk","autoComplete","_jsxs","Stack","minW","mr","ml","FormLabel","Input","pl","_focusVisible","borderColor","boxShadow","type","onChange","placeholder","pattern","title","required","Button","colorScheme","size","m","Loader","filterContacts","_ref","id","onClose","isOpen","reset","Modal","ModalOverlay","ModalContent","display","alignItems","ModalHeader","ModalCloseButton","ModalFooter","Box","as","flexDirection","onClick","deleteContactByIdThunk","deleteContact","newName","setNewName","newNumber","setNewNumber","refreshContactByIdThunk","ModalBody","pb","FormControl","deleteContactId","setDeleteContactId","refreshContactId","setRefreshContactId","_useState5","_useState6","contactName","setContactName","_useState7","_useState8","contactNumber","setContactNumber","_useDisclosure","useDisclosure","onOpen","visibleContacts","useEffect","getContactsThunk","resetId","_Fragment","Filter","map","mb","Text","fontSize","fontWeight","toUpperCase","substring","ButtonGroup","IconButton","icon","EditIcon","boxSize","DeleteIcon","DeleteContact","EditContact","Container","justifyContent","maxW","p","Tabs","TabList","Tab","borderRadius","_selected","bg","_hover","TabPanels","TabPanel","Form","ContactsList"],"sourceRoot":""}